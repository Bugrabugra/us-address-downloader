{"version":3,"sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, dialog, ipcMain, Menu, shell } from \"electron\";\nimport { release } from \"node:os\";\nimport { join } from \"node:path\";\nimport { Scraper } from \"./utils/Xray\";\nimport { template } from \"./utils/menu\";\nimport Store from \"electron-store\";\nimport { Settings } from \"../types/settings\";\nimport { Pool } from \"pg\";\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\n\nprocess.env.DIST_ELECTRON = join(__dirname, \"../\");\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, \"../public\")\n  : process.env.DIST;\n\nconst store = new Store<Settings>({\n  defaults: {\n    host: \"\",\n    database: \"\",\n    port: 0,\n    downloadFolder: \"\"\n  }\n});\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, \"../preload/index.js\");\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(process.env.DIST, \"index.html\");\n\nasync function createWindow() {\n  const scrapper = new Scraper();\n\n  win = new BrowserWindow({\n    title: \"Main window\",\n    icon: join(process.env.PUBLIC, \"favicon.ico\"),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: false,\n      contextIsolation: true\n    }\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    // electron-vite-vue#298\n    win.loadURL(url);\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools();\n  } else {\n    win.loadFile(indexHtml);\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on(\"did-finish-load\", () => {\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\n  });\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\n    return { action: \"deny\" };\n  });\n\n  // const regex = /^([A-Z]).*\\/$/;\n  // const regex = /^([A-Za-z]).*zip$/;\n  ipcMain.handle(\"get-items\", (_, pathSegment, regex) => {\n    return scrapper.getItems({ pathSegment, regex });\n  });\n\n  ipcMain.on(\"set-to-store\", (_, object) => {\n    store.set(object);\n  });\n\n  ipcMain.handle(\"select-folder\", async () => {\n    // console.log(app.getPath(\"userData\"));\n    const { canceled, filePaths } = await dialog.showOpenDialog(win, {\n      properties: [\"openDirectory\"]\n    });\n    if (canceled) {\n      return;\n    } else {\n      return filePaths[0];\n    }\n  });\n\n  ipcMain.handle(\"test-db-connection\", async (_, dbValues) => {\n    const connectionString = `postgres://${dbValues.host}:${dbValues.port}/${dbValues.database}`;\n    const pool = new Pool({ connectionString });\n\n    try {\n      await pool.connect();\n      await pool.query(\"SELECT NOW()\");\n      return { status: \"success\" };\n    } catch (error) {\n      dialog.showErrorBox(\"Error\", error.message);\n      return { status: \"error\" };\n    } finally {\n      pool.end();\n    }\n  });\n\n  // TODO ts hatasini duzelt\n  Menu.setApplicationMenu(Menu.buildFromTemplate(template(win)));\n}\n\napp.whenReady().then(createWindow);\n\napp.on(\"window-all-closed\", () => {\n  win = null;\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"second-instance\", () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on(\"activate\", () => {\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length) {\n    allWindows[0].focus();\n  } else {\n    createWindow();\n  }\n});\n\n// New window example arg: new windows url\nipcMain.handle(\"open-win\", (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: false,\n      contextIsolation: true\n    }\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`);\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg });\n  }\n});\n"],"mappings":"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","names":["Store","url"],"file":"index.js"}